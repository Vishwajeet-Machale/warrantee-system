generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model OemAccount {
  id               String           @id @default(uuid())
  company_name     String
  gst_number       String
  contact_email    String
  support_number   String
  address          String
  created_by       String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  is_deleted        Boolean           @default(false)
  amcPlans         AmcPlan[]
  products         Product[]
  users            User[]
  warrantyPolicies WarrantyPolicy[]
}

model ServiceAgency {
  id                String              @id @default(uuid())
  agency_name       String
  location          String
  contact_email     String
  contact_number    String
  created_at        DateTime            @default(now())
  updated_at        DateTime            @updatedAt
  is_deleted        Boolean           @default(false)
  users             User[]
  TechnicianProfile TechnicianProfile[]
}

model User {
  id                String             @id @default(uuid())
  name              String
  email             String             @unique
  phone             String
  password          String
  user_type         UserType
  role_id           Int
  oem_account_id    String?
  service_agency_id String?
  status            UserStatus         @default(ACTIVE)
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  // is_verified       Boolean           @default(false)
  oemAccount        OemAccount?        @relation(fields: [oem_account_id], references: [id])
  role              Role               @relation(fields: [role_id], references: [id])
  serviceAgency     ServiceAgency?     @relation(fields: [service_agency_id], references: [id])
  endUserProfile    EndUserProfile?
  oemUserProfile    OemUserProfile?
  technicianProfile TechnicianProfile?

  @@index([oem_account_id], map: "User_oem_account_id_fkey")
  @@index([role_id], map: "User_role_id_fkey")
  @@index([service_agency_id], map: "User_service_agency_id_fkey")
}

model Role {
  id                  Int                 @id @default(autoincrement())
  name                String
  oem_account_id      String?             @db.VarChar(36)
  users               User[]
  roleFeatureAccesses RoleFeatureAccess[]
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  
}

model Feature {
  id                  Int                 @id @default(autoincrement())
  code                String              @unique
  module              String
  roleFeatureAccesses RoleFeatureAccess[]
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
}

model RoleFeatureAccess {
  id         Int        @id @default(autoincrement())
  roleId     Int
  featureId  Int
  accessType AccessType
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted Boolean  @default(false)
  feature    Feature    @relation(fields: [featureId], references: [id])
  role       Role       @relation(fields: [roleId], references: [id])

  @@unique([roleId, featureId])
  @@index([featureId], map: "role_feature_accesses_featureId_fkey")
  @@map("role_feature_accesses")
}

model TechnicianProfile {
  userId           String         @id
  skills           String?
  certifications   String?
  assignedAgencyId String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  assignedAgency   ServiceAgency? @relation(fields: [assignedAgencyId], references: [id])
  user             User           @relation(fields: [userId], references: [id])

  @@index([assignedAgencyId], map: "technician_profiles_assignedAgencyId_fkey")
  @@map("technician_profiles")
}

model EndUserProfile {
  userId       String  @id
  address      String?
  familyId     Int?
  referralCode String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  user         User    @relation(fields: [userId], references: [id])

  @@map("end_user_profiles")
}

model OemUserProfile {
  userId      String  @id
  designation String?
  employeeId  String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  user        User    @relation(fields: [userId], references: [id])

  @@map("oem_user_profiles")
}

model ProductCategory {
  id               Int               @id @default(autoincrement()) @map("category_id")
  parent_id        Int?              @map("parent_id")
  name             String
  description      String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  products         Product[]
  parent           ProductCategory?  @relation("CategoryParent", fields: [parent_id], references: [id])
  children         ProductCategory[] @relation("CategoryParent")
  warrantyPolicies WarrantyPolicy[]  @relation("PolicyCategories")

  @@index([parent_id], map: "ProductCategory_parent_id_fkey")
  AmcPlan AmcPlan[] @relation("AmcPlanCategories")
}

model Product {
  id               Int              @id @default(autoincrement())
  oem_account_id   String           @map("oem_account_id")
  name             String
  category_id      Int
  specifications   String?
  created_at       DateTime         @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  category         ProductCategory  @relation(fields: [category_id], references: [id])
  oemAccount       OemAccount       @relation(fields: [oem_account_id], references: [id])
  variants         ProductVariant[]
  warrantyPolicies WarrantyPolicy[]

  @@index([category_id], map: "Product_category_id_fkey")
  @@index([oem_account_id], map: "Product_oem_account_id_fkey")
  AmcPlan AmcPlan[]
}

model ProductVariant {
  id                Int              @id @default(autoincrement()) @map("variant_id")
  product_id        Int
  sku_code          String
  model_no          String
  variant_name      String
  attributes_json   Json
  dealer_price      Float
  MRP               Float
  warranty_months   Int
  amc_available     Boolean
  refundable        Boolean
  launch_date       DateTime
  discontinued_date DateTime?
  bar_code          String
  image_url         String?
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  amcPlans          AmcPlan[]
  product           Product          @relation(fields: [product_id], references: [id])
  warrantyPolicies  WarrantyPolicy[]

  @@index([product_id], map: "ProductVariant_product_id_fkey")
}

model WarrantyPolicy {
  id               Int               @id @default(autoincrement())
  oem_account_id   String
  policy_name      String
  description      String?
  is_transferable  Boolean
  product_id       Int?
  variant_id       Int?
  duration_months  Int
  coverage_details String
  terms_json       Json
  type             WarrantyType
  trigger          WarrantyTrigger
  set_conditions   String?
  price            Decimal            @db.Decimal(10, 2)
  start_date       DateTime
  end_date         DateTime
  created_at        DateTime           @default(now())
  updated_at        DateTime           @updatedAt
  is_deleted        Boolean           @default(false)
  oemAccount       OemAccount        @relation(fields: [oem_account_id], references: [id])
  product          Product?          @relation(fields: [product_id], references: [id])
  variant          ProductVariant?   @relation(fields: [variant_id], references: [id])
  categories       ProductCategory[] @relation("PolicyCategories")

  @@index([oem_account_id], map: "WarrantyPolicy_oem_account_id_fkey")
  @@index([product_id], map: "WarrantyPolicy_product_id_fkey")
  @@index([variant_id], map: "WarrantyPolicy_variant_id_fkey")
  @@unique([oem_account_id, policy_name])
}



model AmcPlan {
  id               Int               @id @default(autoincrement())
  oem_account_id   String
  plan_name        String
  description      String
  product_id       Int?
  variant_id       Int?
  price            Decimal            @db.Decimal(10, 2)
  duration_months  Int
  benefits_json    Json
  active           Boolean
  renewal_options  String?
  eligibility      String
  start_date       DateTime
  end_date         DateTime
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  is_deleted        Boolean           @default(false)


  // Relations
  oemAccount       OemAccount        @relation(fields: [oem_account_id], references: [id])
  product          Product?          @relation(fields: [product_id], references: [id])
  variant          ProductVariant?   @relation(fields: [variant_id], references: [id])
  categories       ProductCategory[] @relation("AmcPlanCategories")

  @@index([oem_account_id], map: "AmcPlan_oem_account_id_fkey")
  @@index([product_id], map: "AmcPlan_product_id_fkey")
  @@index([variant_id], map: "AmcPlan_variant_id_fkey")
  @@unique([oem_account_id, plan_name])

}


enum UserType {
  SUPER_ADMIN
  OEM
  TECHNICIAN
  SERVICE_AGENCY
  END_USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

enum AccessType {
  READ
  WRITE
  MANAGE
}

enum WarrantyType {
  STANDARD
  EXTENDED
}

enum WarrantyTrigger {
  PURCHASE_DATE
  INSTALLATION_DATE
}
